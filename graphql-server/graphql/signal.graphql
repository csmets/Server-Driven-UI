interface EmitSignals {
    emitSignals: [EmitSignal!]
}

type EmitSignal {
    signal: Signal
    values: [SignalValuePair!]!
}

enum SignalValuePairKey {
    ICON
    CONTENT
    PRIMARY
}

type SignalValuePair {
    key: SignalValuePairKey!,
    value: SignalValuePairValue!
}

type SignalStringValue {
    text: String!
}

type SignalArrayValue {
    prefix: [String!]
    suffix: [String!]
    array: [String!]!
}

union SignalValuePairValue = SignalStringValue | SignalArrayValue

type Signal {
    type: SignalType!
    reference: String
}

input SignalInput {
    type: SignalType!
    reference: String
}

enum SignalType {
    TOGGLE
    UPDATE
    TITLE
    ERROR
}